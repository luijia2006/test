<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"
	default-lazy-init="true">
	<!-- 配置druid数据源 -->
    <bean name="parentDataSource" abstract="true"   class="com.alibaba.druid.pool.DruidDataSource"
        init-method="init" destroy-method="close">

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="1500" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />

        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->
        <!--
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
        -->

        <!-- 验证数据库连接有效性，要求查询语句 -->
        <property name="validationQuery" value="select x" />
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置true会降低性能。 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置true会降低性能 -->
        <property name="testOnReturn" value="false" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000" />

        <!-- 对于长时间不使用的连接强制关闭 -->
        <property name="removeAbandoned" value="true" />
        <!-- 关闭超过30分钟的空闲连接，1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

        <!-- 监控数据库 -->
        <!-- <property name="filters" value="mergeStat" /> -->
        <property name="filters" value="stat,wall" />
    </bean>
	
	<bean id="ds" parent="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="dataSource" class="com.we.core.db.ds.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="ds" key="ds"/>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="ds" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:sql/**/*.xml"/>
		<property name="configLocation" value="classpath:config/mybatis.xml"/>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean id="sqlMapper" class="com.we.core.db.dao.SqlMapper" scope="prototype">
		<constructor-arg ref="sqlSession"/>
	</bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.we.base,com.we.core.db.service,com.we" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="properties">
	        <value>
	            mappers=com.we.core.db.base.Mapper
	        </value>
	    </property>
    </bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true" />

	<tx:annotation-driven transaction-manager="tx" proxy-target-class="true" />
	<tx:advice id="txAdvice" transaction-manager="tx">
		<tx:attributes>
			<!-- 更新的方法，有事务 -->
			<tx:method name="add*"/>
			<tx:method name="save*"/>
			<tx:method name="create*"/>
			<tx:method name="update*"/>
			<tx:method name="edit*"/>
			<tx:method name="delete*"/>
			<!-- 其他的方法，没有事务，需要事务，自己在代码级别通过注解显示添加 -->
			<tx:method name="*" propagation="NOT_SUPPORTED"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="leePointcut" expression="execution(* *..*.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="leePointcut" />
	</aop:config>
</beans>
