<?xml version="1.1" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!--
        参考：https://blog.csdn.net/jiaincs/article/details/5686287
             https://blog.csdn.net/inke88/article/details/75007649#%E9%BB%98%E8%AE%A4%E6%97%A5%E5%BF%97-logback
     -->
	<!--
       说明：
       1、日志级别及文件
           日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中
           例如：error级别记录到"error.应用名.xxx.log"或"error.应用名.log"（该文件为当前记录的日志文件），而"error.应用名.xxx.log"为归档日志，
           日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名
           例如info.eureka-server.2018-06-11.0.log
           其它级别的日志也是如此。
       2、文件路径
           若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。
           若部署到Tomcat下，则在Tomcat下的logs文件中
       3、Appender
           FILEERROR对应error级别，文件名以"error.应用名.xxx.log"形式命名
           FILEWARN对应warn级别，文件名以"warn.应用名.xxx.log"形式命名
           FILEINFO对应info级别，文件名以"info.应用名.xxx.log"形式命名
           FILEDEBUG对应debug级别，文件名以"debug.应用名.xxx.log"形式命名
           stdout将日志信息输出到控制上，为方便开发测试使用
    -->
	<property name="logback.logdir" value="/usr/local/logs/test"/>
	<property name="logback.appname" value="test"/>

	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!--展示格式 layout-->
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>
				<pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
			</pattern>
		</layout>
	</appender>

	<appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
        所以我们使用下面的策略，可以避免输出 Error 的日志-->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<!--过滤 Error-->
			<level>ERROR</level>
			<!--匹配到就禁止-->
			<onMatch>DENY</onMatch>
			<!--没有匹配到就允许-->
			<onMismatch>ACCEPT</onMismatch>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
		<File>${logback.logdir}/info.${logback.appname}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
			<FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过200MB，若超过200MB，日志文件会以索引0开始，
            命名日志文件，例如log-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>200MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--只保留最近90天的日志-->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
			<totalSizeCap>512GB</totalSizeCap>
		</rollingPolicy>
		<!--日志输出编码格式化-->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>Error</level>
		</filter>
		<!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
		<File>${logback.logdir}/error.${logback.appname}.log</File>
		<!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
			<FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.%i.log.gz</FileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过200MB，若超过200MB，日志文件会以索引0开始，
            命名日志文件，例如log-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>200MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--只保留最近90天的日志-->
			<maxHistory>90</maxHistory>
			<!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
			<totalSizeCap>512GB</totalSizeCap>
		</rollingPolicy>
		<!--日志输出编码格式化-->
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 下面配置一些第三方包的日志过滤级别，用于避免刷屏 -->
	<Logger name="net.sf.ehcache" level="error"/>
	<logger name="org.apache" level="WARN" />
	<logger name="org.hibernate" level="WARN" />
	<logger name="org.springframework" level="WARN" />
	<logger name="com.opensymphony" level="WARN" />
	<logger name="org.mybatis" level="WARN" />
	<logger name="tk.mybatis" level="WARN" />
	<Logger name="com.fasterxml.jackson" level="WARN"/>
	<logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="WARN" />
	<logger name="org.hibernate.type.descriptor.sql.BasicExtractor" level="WARN" />
	<logger name="org.hibernate.SQL" level="WARN" />
	<logger name="org.hibernate.engine.QueryParameters" level="WARN" />
	<logger name="org.hibernate.engine.query.HQLQueryPlan" level="WARN" />
	<logger name="com.alibaba" level="WARN" />
	<logger name="com.ctrip" level="WARN" />
	<logger name="com.netflix" level="WARN" />
	<logger name="springfox.documentation.spring" level="WARN" />

	<!-- 日志级别：生产环境改成error -->
	<root level="debug" >
		<!-- 控制台输出：生产环境下去除 -->
		<appender-ref ref="console" />
		<!-- 日志文件输出 -->
		<appender-ref ref="fileInfoLog" />
		<!-- 日志文件输出 -->
		<appender-ref ref="fileErrorLog" />
	</root>

</configuration>